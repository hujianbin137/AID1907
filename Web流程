选择结构 （可以设置范围）
	if(条件表达式){
	表达式成立时执行的代码段
	}
	注意 : 除零值以外,其他值都为真,以下条件为假值false
	if(0){}
	if(0.0){}
	if(""){} //空字符串
	if(undefined){}
	if(NaN){}
	if(null){}
if else 结构
	if(条件表达式){
	//条件成立时执行
	}else{
	//条件不成立时选择执行
	}	
多重分支结构
	if(条件1){
	//条件1成立时执行
	}else if(条件2){
	//条件2成立时执行
	}else if(条件3){
	//条件3成立时执行
	}...else{
	//条件不成立时执行
	}

switch语句  (不可以设置范围  全等)
	switch(value){
	case 值1 :
	//value与值1匹配全等时,执行的代码段
	break; //结束匹配
	case 值2 :
	//value与值2匹配全等时,执行的代码段
	break;
	case 值3 :
	//value与值3匹配全等时,执行的代码段
	break;
	default:
	//所有case匹配失败后默认执行的语句
	break;
	}

循环结构
	1. while循环
	定义循环变量;
	while(循环条件){
	条件满足时执行的代码段
	更新循环变量;
	}
	2. do-while循环
	do{
	循环体;
	更新循环变量
	}while(循环条件);
与 while 循环的区别 :
	while 循环先判断循环条件,条件成立才执行循环体
	do-while 循环不管条件是否成立,先执行一次循环体

for循环:
	for(定义循环变量;循环条件;更新循环变量){
	循环体;
	}

函数: function
	function 函数名(参数列表){
	函数体
	return 返回值;
	}

匿名函数:
	(function (形参){
	})(实参);
定义变量接收匿名函数：
	var fn = function (){};
	fn(); //函数调用
作用域：
	JavaScript 中作用域分为全局作用域和函数作用域,以函数的{ }作为划分作用域的依据
	1. 全局变量和全局函数
		只要在函数外部使用 var 关键字定义的变量,或函数都是全局变量和全局函数,在任何地方都可以访问
		所有省略 var 关键字定义的变量,一律是全局变量
	2. 局部变量/局部函数
		在函数内部使用 var 关键字定义的变量为局部变量,函数内部定义的函数也为局部函数,只能在当前作用域中使用,外界无法访问

获取多个DOM元素和控制属性：
	1. 根据标签名获取元素节点列表
		var elems = document.getElementsByTagName("");
		/*
		参数 : 标签名
		返回值 : 节点列表,需要从节点列表中获取具体的元素节点对象,添加相应下标。
		*/
	2.根据 class 属性值获取元素节点列表
		var elems = document.getElementsByClassName("");
		/*
		参数 : 类名(class属性值)
		返回值 : 节点列表
		*/
	3.元素节点对象提供了以下属性来操作元素内容
		innerHTML : 读取或设置元素文本内容,可识别标签语法
		innerText : 设置元素文本内容,不能识别标签语法
		value : 读取或设置表单控件的值

获取/设置DOM树中的属性值：
	elem.getAttribute("attrname");//根据指定的属性名返回对应属性值
	elem.setAttribute("attrname","value");//为元素添加属性,参数为属性名和属性值
	elem.removeAttribute("attrname");//移除指定属性


this ：表示执行函数事件的元素
	
